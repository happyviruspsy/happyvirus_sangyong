{"version":3,"sources":["IconexConnect.js","SDK.js","App.js","serviceWorker.js","index.js"],"names":["IconexConnect","getAddress","Promise","resolve","window","addEventListener","eventHandler","event","_event$detail","detail","type","payload","removeEventListener","dispatchEvent","CustomEvent","sendTransaction","params","_event$detail2","result","provider","HttpProvider","PROVIDER_URL","iconService","IconService","CallBuilder","IconBuilder","CallTransactionBuilder","IcxTransactionBuilder","SDK","callBuild","_ref","arguments","length","undefined","from","methodName","to","_ref$params","method","build","sendTxBuild","_ref3","_ref3$params","_ref3$networkId","networkId","NID","_ref3$stepLimit","stepLimit","_ref3$value","value","jsonrpc","nid","timestamp","concat","Date","getTime","toString","version","id","sendTxBuild2","_ref2","_ref2$networkId","_ref2$stepLimit","_ref2$value","useStyles","makeStyles","theme","root","background","props","color","border","borderRadius","boxShadow","height","padding","margin","card","maxWidth","media","MyButton","other","Object","objectWithoutProperties","classes","react_default","a","createElement","Button","assign","className","hexToString","hex","string","i","String","fromCharCode","parseInt","substr","App","state","login","txevent","curmsg","myAddress","msg","funcLogin","_callee","e","buf","regenerator_default","wrap","_context","prev","next","sent","_this","setState","call","CONTRACT_ADDRESS","execute","console","log","stop","funcUpdate","target","funcTx","_callee2","txObj","tx","_context2","IconConverter","fromUtf8","alert","href","this","Fragment","Card","style","backgroundColor","CardActionArea","CardMedia","title","CardContent","Typography","gutterBottom","variant","component","CardActions","TextField","width","label","textField","onChange","onClick","marginTop","Component","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAkCiBA,SAAA,CACbC,WAnCe,kBAAM,IAAIC,QAAQ,SAACC,GAQlCC,OAAOC,iBAAiB,wBAPH,SAAfC,EAAgBC,GAAU,IAAAC,EACJD,EAAME,OAAxBC,EADsBF,EACtBE,KAAMC,EADgBH,EAChBG,QACD,qBAATD,GACFP,EAAQQ,GAEVP,OAAOQ,oBAAoB,wBAAyBN,KAGtDF,OAAOS,cAAc,IAAIC,YAAY,uBAAwB,CAC3DL,OAAQ,CACNC,KAAM,yBAyBVK,gBAnBsB,SAAAC,GAAM,OAAI,IAAId,QAAQ,SAACC,GAQ7CC,OAAOC,iBAAiB,wBAPH,SAAfC,EAAgBC,GAAU,IAAAU,EACJV,EAAME,OAAxBC,EADsBO,EACtBP,KAAMC,EADgBM,EAChBN,QACD,sBAATD,GACFP,EAAQQ,EAAQO,QAElBd,OAAOQ,oBAAoB,wBAAyBN,KAGtDF,OAAOS,cAAc,IAAIC,YAAY,uBAAwB,CAC3DL,OAAQ,CACNC,KAAM,mBACNC,QAASK,4BCvBTG,EAAW,IAAIC,eAAahB,OAAOiB,cACnCC,EAAc,IAAIC,IAAYJ,GAGlCK,EAGEC,cAHFD,YACAE,EAEED,cAFFC,uBACAC,EACEF,cADFE,sBA2EaC,EAAA,CACbN,cACAO,UA1EgB,WAKP,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAJFG,EAISJ,EAJTI,KACAC,EAGSL,EAHTK,WACAC,EAESN,EAFTM,GAESC,EAAAP,EADTd,cACS,IAAAqB,EADA,GACAA,EAQT,OAPoB,IAAIb,GAErBU,KAAKA,GACLE,GAAGA,GACHE,OAAOH,GACPnB,OAAOA,GACPuB,SA+DHC,YAjCkB,WAQT,IAAAC,EAAAV,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAPFG,EAOSO,EAPTP,KACAE,EAMSK,EANTL,GACAD,EAKSM,EALTN,WAKSO,EAAAD,EAJTzB,cAIS,IAAA0B,EAJA,GAIAA,EAAAC,EAAAF,EAHTG,iBAGS,IAAAD,EAHGvC,OAAOyC,IAGVF,EAAAG,EAAAL,EAFTM,iBAES,IAAAD,EAFG,UAEHA,EAAAE,EAAAP,EADTQ,aACS,IAAAD,EADD,MACCA,EAcT,MAAO,CACLE,QAAS,MACTZ,OAAQ,sBACRtB,QAhB6B,IAAIU,GAEhCyB,IAAIP,GACJV,KAAKA,GACLE,GAAGA,GACHW,UAAUA,GACVE,MAAMA,GACNG,UANS,KAAAC,QAMgC,KAAxB,IAAIC,MAAQC,WAAkBC,SAAS,MACxDlB,OAAOH,GACPnB,OAAOA,GACPyC,QAAQ,OACRlB,QAMDmB,GAAI,IAQNC,aA5DmB,WAMV,IAAAC,EAAA7B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GALFG,EAKS0B,EALT1B,KACAE,EAISwB,EAJTxB,GAISyB,EAAAD,EAHThB,iBAGS,IAAAiB,EAHGzD,OAAOyC,IAGVgB,EAAAC,EAAAF,EAFTb,iBAES,IAAAe,EAFG,UAEHA,EAAAC,EAAAH,EADTX,aACS,IAAAc,EADD,MACCA,EAYT,MAAO,CACLb,QAAS,MACTZ,OAAQ,sBACRtB,QAdyB,IAAIW,GAE5BwB,IAAIP,GACJV,KAAKA,GACLE,GAAGA,GACHW,UAAUA,GACVE,MAAMA,GACNG,UANS,KAAAC,QAMgC,KAAxB,IAAIC,MAAQC,WAAkBC,SAAS,MACxDC,QAAQ,OACRlB,QAMDmB,GAAI,sFC7BJM,EAAYC,YAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,WAAY,SAAAC,GAAK,MACC,QAAhBA,EAAMC,MACF,mDACA,oDACNC,OAAQ,EACRC,aAAc,EACdC,UAAW,SAAAJ,GAAK,MACE,QAAhBA,EAAMC,MACF,wCACA,wCACNA,MAAO,QACPI,OAAQ,GACRC,QAAS,SACTC,OAAQ,GAEVC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLL,OAAQ,QASZ,SAASM,EAASX,GACYA,EAApBC,MADe,IACLW,EADKC,OAAAC,EAAA,EAAAD,CACKb,EADL,WAEjBe,EAAUpB,EAAUK,GAC1B,OAAOgB,EAAAC,EAAAC,cAACC,EAAA,EAADN,OAAAO,OAAA,CAAQC,UAAWN,EAAQjB,MAAUc,IAO9C,SAASU,EAAaC,GAEpB,IADA,IAAIC,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAAI5D,OAAQ8D,GAAK,EACnCD,GAAUE,OAAOC,aAAaC,SAASL,EAAIM,OAAOJ,EAAG,GAAI,KAE3D,OAAOD,MAGYM,6MACnBC,MAAQ,CACNC,OAAO,EACPC,SAAS,EACTC,OAAQ,GACRC,UAAW,GACXC,IAAK,MAKPC,gDAAY,SAAAC,EAAOC,GAAP,IAAAJ,EAAAC,EAAAI,EAAA,OAAAC,EAAAxB,EAAAyB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACclH,EAAcC,aAD5B,cACJuG,EADIQ,EAAAG,KAEVC,EAAKC,SAAS,CACZhB,OAAO,EACPG,UAAWA,IAJHQ,EAAAE,KAAA,EAQVtF,EAAIN,YAAYgG,KACd1F,EAAIC,UAAU,CACZK,KAAMkF,EAAKhB,MAAMI,UACjBrE,WAAY,mBACZnB,OAAQ,GAERoB,GAAIhC,OAAOmH,oBAEbC,UAhBQ,OAOJf,EAPIO,EAAAG,KAkBNN,EAAMlB,EAAYc,GACxBgB,QAAQC,IAAIjB,EAAKI,GACjBO,EAAKC,SAAS,CACZZ,IAAKI,IArBK,yBAAAG,EAAAW,SAAAhB,8DA0BZiB,WAAa,SAAChB,GACZQ,EAAKC,SAAS,CACZd,OAAQK,EAAEiB,OAAO5E,WAIrB6E,4BAAS,SAAAC,IAAA,IAAAvF,EAAAwF,EAAAC,EAAA,OAAAnB,EAAAxB,EAAAyB,KAAA,SAAAmB,GAAA,cAAAA,EAAAjB,KAAAiB,EAAAhB,MAAA,cACC1E,EAAgBZ,EAAhBY,YAGFwF,EAAQxF,EAAY,CACxBN,KAAMkF,EAAKhB,MAAMI,UACjBpE,GAAIhC,OAAOmH,iBACXpF,WAAY,kBACZnB,OAAQ,CACNyF,IAAK0B,gBAAcC,SAAShB,EAAKhB,MAAMG,WAG3CkB,QAAQC,IAAIS,gBAAcC,SAAShB,EAAKhB,MAAMG,SAZvC2B,EAAAhB,KAAA,EAaUlH,EAAce,gBAAgBiH,GAbxC,QAaDC,EAbCC,EAAAf,OAeLkB,MAAM,6BAAWjB,EAAKhB,MAAMG,OAAS,wGAEvCkB,QAAQC,IAAI,KAAMO,SAAWA,GAjBtB,wBAAAC,EAAAP,SAAAI,8EAsBP,OACE1C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAClBL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAG+C,KAAK,KAAR,qBAECC,KAAKnC,MAAMC,MASRhB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkD,SAAA,KACED,KAAKnC,MAAME,QACTjB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkD,SAAA,MAMEnD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkD,SAAA,KAEInD,EAAAC,EAAAC,cAACkD,EAAA,EAAD,CAAM/C,UAAW1B,EAAUa,KAAM6D,MAAO,CAACC,gBAAgB,oBACvDtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,KACEvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CACEnD,UAAW1B,EAAUe,MAErB+D,MAAM,0BAERzD,EAAAC,EAAAC,cAACwD,EAAA,EAAD,KACE1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAC9C9D,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,SAAIgD,KAAKnC,MAAMK,SAIzBpB,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,KAEE/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CACEX,MAAO,CAAEY,MAAO,KAChB5F,GAAG,gBACH6F,MAAM,mBACN7D,UAAW1B,EAAUwF,UACrBvG,MAAOsF,KAAKnC,MAAMG,OAClBkD,SAAUlB,KAAKX,WAIfhD,OAAO,SACPsE,QAAQ,aAEV7D,EAAAC,EAAAC,cAACP,EAAD,CAAU0E,QAASnB,KAAKT,OAAQxD,MAAM,MAAMoE,MAAO,CAAEhE,OAAQ,GAAIiF,UAAW,GAAIL,MAAO,MAAvF,YA9ChBjE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkD,SAAA,KAEEnD,EAAAC,EAAAC,cAACF,EAAAC,EAAMkD,SAAP,KACEnD,EAAAC,EAAAC,cAACP,EAAD,CAAUV,MAAM,MAAMoF,QAASnB,KAAK7B,WAApC,wCA1EekD,aC5DbC,QACW,cAA7BzJ,OAAO0J,SAASC,UAEe,UAA7B3J,OAAO0J,SAASC,UAEhB3J,OAAO0J,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.82f6ec3a.chunk.js","sourcesContent":["const getAddress = () => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_ADDRESS') {\n        resolve(payload);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_ADDRESS',\n      },\n    }));\n  });\n  \n  \n  const sendTransaction = params => new Promise((resolve) => {\n    const eventHandler = (event) => {\n      const { type, payload } = event.detail;\n      if (type === 'RESPONSE_JSON-RPC') {\n        resolve(payload.result);\n      }\n      window.removeEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    };\n    window.addEventListener('ICONEX_RELAY_RESPONSE', eventHandler);\n    window.dispatchEvent(new CustomEvent('ICONEX_RELAY_REQUEST', {\n      detail: {\n        type: 'REQUEST_JSON-RPC',\n        payload: params,\n      },\n    }));\n  });\n  \n  export default {\n    getAddress,\n    sendTransaction,\n  };","import IconService, {\n    HttpProvider,\n    IconBuilder,\n  } from 'icon-sdk-js'\n\n  \n  const provider = new HttpProvider(window.PROVIDER_URL)\n  const iconService = new IconService(provider)\n  \n  const {\n    CallBuilder,\n    CallTransactionBuilder,\n    IcxTransactionBuilder,\n  } = IconBuilder;\n  \n  const callBuild = ({\n    from,\n    methodName,\n    to,\n    params = {},\n  } = {}) => {\n    const callBuilder = new CallBuilder();\n    const obj = callBuilder\n      .from(from)\n      .to(to)\n      .method(methodName)\n      .params(params)\n      .build();\n    return obj;\n  };\n  \n  const sendTxBuild2 = ({\n    from,\n    to,\n    networkId = window.NID,\n    stepLimit = '0x493e0',\n    value = '0x0',\n  } = {}) => {\n    const TransactionBuilder = new IcxTransactionBuilder();\n    const obj = TransactionBuilder\n      .nid(networkId)\n      .from(from)\n      .to(to)\n      .stepLimit(stepLimit)\n      .value(value)\n      .timestamp(`0x${((new Date()).getTime() * 1000).toString(16)}`)\n      .version('0x3')\n      .build();\n  \n    return {\n      jsonrpc: '2.0',\n      method: 'icx_sendTransaction',\n      params: obj,\n      id: 1,\n    };\n  };\n  \n  const sendTxBuild = ({\n    from,\n    to,\n    methodName,\n    params = {},\n    networkId = window.NID,\n    stepLimit = '0x493e0',\n    value = '0x0',\n  } = {}) => {\n    const callTransactionBuilder = new CallTransactionBuilder();\n    const obj = callTransactionBuilder\n      .nid(networkId)\n      .from(from)\n      .to(to)\n      .stepLimit(stepLimit)\n      .value(value)\n      .timestamp(`0x${((new Date()).getTime() * 1000).toString(16)}`)\n      .method(methodName)\n      .params(params)\n      .version('0x3')\n      .build();\n  \n    return {\n      jsonrpc: '2.0',\n      method: 'icx_sendTransaction',\n      params: obj,\n      id: 1,\n    };\n  };\n  \n  export default {\n    iconService,\n    callBuild,\n    sendTxBuild,\n    sendTxBuild2\n  }","import React, { Component } from 'react';\nimport './App.css';\n\nimport IconexConnect from './IconexConnect';\nimport {\n  IconConverter\n} from 'icon-sdk-js'\nimport SDK from './SDK.js';\n\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/styles';\nimport PropTypes from 'prop-types';\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nimport TextField from '@material-ui/core/TextField';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: props =>\n      props.color === 'red'\n        ? 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)'\n        : 'linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: props =>\n      props.color === 'red'\n        ? '0 3px 5px 2px rgba(255, 105, 135, .3)'\n        : '0 3px 5px 2px rgba(33, 203, 243, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px',\n    margin: 8,\n  },\n  card: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n  // textField: {\n  //   marginLeft: theme.spacing(1),\n  //   marginRight: theme.spacing(1),\n  // },\n\n}));\n\nfunction MyButton(props) {\n  const { color, ...other } = props;\n  const classes = useStyles(props);\n  return <Button className={classes.root} {...other} />;\n}\n\nMyButton.propTypes = {\n  color: PropTypes.string.isRequired,\n};\n\nfunction hexToString (hex) {\n  var string = '';\n  for (var i = 0; i < hex.length; i += 2) {\n    string += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n  }\n  return string;\n}\n\nexport default class App extends Component {\n  state = {\n    login: false,\n    txevent: false,\n    curmsg: '',\n    myAddress: '',\n    msg: ''\n  }\n\n\n\n  funcLogin = async (e) => {\n    const myAddress = await IconexConnect.getAddress()\n    this.setState({\n      login: true,\n      myAddress: myAddress\n    })\n\n    const msg = await\n    SDK.iconService.call(\n      SDK.callBuild({\n        from: this.state.myAddress,\n        methodName: 'read_happy_virus',\n        params: {\n        },\n        to: window.CONTRACT_ADDRESS,\n      })\n    ).execute()\n\n  const buf = hexToString(msg)\n  console.log(msg, buf)\n  this.setState({\n    msg: buf\n  })\n\n  }\n\n  funcUpdate = (e) => {\n    this.setState({\n      curmsg: e.target.value\n    })\n  }\n\n  funcTx = async () => {\n    const { sendTxBuild } = SDK\n\n\n    const txObj = sendTxBuild({\n      from: this.state.myAddress,\n      to: window.CONTRACT_ADDRESS,\n      methodName: 'put_happy_virus',\n      params: {\n        msg: IconConverter.fromUtf8(this.state.curmsg), \n      },\n    })\n    console.log(IconConverter.fromUtf8(this.state.curmsg))\n    const tx = await IconexConnect.sendTransaction(txObj)\n    if (tx){\n      alert(\"전송하신 <\" + this.state.curmsg + \"> 메세지가 다음 사람에게 전달됩니다. XD \")\n    }\n    console.log(\"tx\", tx, typeof(tx))\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        <h1><a href=\"/\">Love, Love, Love</a></h1>\n          {\n            !this.state.login ? (\n              <>\n                \n                <React.Fragment>\n                  <MyButton color=\"red\" onClick={this.funcLogin}>지갑 연동</MyButton>\n                </React.Fragment>\n             \n              </>\n            ) : (\n                <>{\n                  this.state.txevent ? (\n                    <>\n\n                        \n\n                    </>\n                  ) : (\n                      <>\n \n                          <Card className={useStyles.card} style={{backgroundColor:'mediumslateblue'}}>\n                            <CardActionArea>\n                              <CardMedia\n                                className={useStyles.media}\n\n                                title=\"Contemplative Reptile\"\n                              />\n                              <CardContent>\n                                <Typography gutterBottom variant=\"h3\" component=\"h2\">\n                                  <h2><a>{this.state.msg}</a></h2>\n                                </Typography>\n                              </CardContent>\n                            </CardActionArea>\n                            <CardActions>\n\n                              <TextField\n                                style={{ width: 600 }}\n                                id=\"outlined-name\"\n                                label=\"Love Msg To Next\"\n                                className={useStyles.textField}\n                                value={this.state.curmsg}\n                                onChange={this.funcUpdate}\n\n                                // value={useStyles.values.name}\n                                // onChange={useStyles.handleChange('name')}\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                              />\n                              <MyButton onClick={this.funcTx} color=\"red\" style={{ height: 62, marginTop: 15, width: 150 }}>\n                                Send\n                              </MyButton>\n                            </CardActions>\n                          </Card>\n\n                      </>\n                    )\n                }\n                </>\n              )\n          }\n\n        </header>\n      </div>\n    );\n  }\n\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}